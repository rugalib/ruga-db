<?php
/*
 * SPDX-FileCopyrightText: 2023 Roland Rusch, easy-smart solution GmbH <roland.rusch@easy-smart.ch>
 * SPDX-License-Identifier: AGPL-3.0-only
 */

declare(strict_types=1);

namespace Ruga\Db\Table;

use Laminas\Cache\Storage\StorageInterface;
use Laminas\Db\Metadata\Object\TableObject;
use Laminas\Db\Sql\Select;
use Laminas\Db\TableGateway\TableGatewayInterface;
use Psr\Http\Message\ServerRequestInterface;
use Ruga\Db\Row\RowInterface;

interface TableInterface extends TableGatewayInterface
{
    /**
     * Initialize object.
     * Called from {@link AbstractTable::__construct()} as final step of object instantiation.
     */
    public function init();
    
    
    
    /**
     * Returns table information.
     * You can elect to return only a part of this information by supplying its key name,
     * otherwise all information is returned as an array.
     *
     * @param string $key The specific info part to return OPTIONAL
     *
     * @return mixed
     */
    public function info($key = null);
    
    
    
    /**
     * Create a new row and initializes it with default values from data base.
     *
     * @param array $rowData
     *
     * @return RowInterface
     * @throws \ReflectionException
     */
    public function createRow(array $rowData = []): RowInterface;
    
    
    
    /**
     * Creates the object with given primary key.
     *
     * @param string $id id oder uniqueid
     *
     * @return self|null
     * @throws \Exception
     */
    static public function factory($id);
    
    
    
    /**
     * Find rows by primary key.
     *
     * @param string|array $id
     *
     * @return \Ruga\Db\ResultSet\ResultSet
     */
    public function findById($id)/*: \Ruga\Db\ResultSet\ResultSet*/ ;
    
    
    
    /**
     * Get the meta data for the table.
     *
     * @return TableObject
     * @throws \Exception
     */
//    public function getTableMetadata(): TableObject;
    
    
    /**
     * Returns the meta data as an array.
     *
     * @return array
     * @throws \Exception
     */
//    public function getMetadata(): array;
    
    
    public function getLastInsertValue();
    
    
    
    public function getSql();
    
    
    
    public function getAdapter();
    
    
    
    public function getMetadataCache(): StorageInterface;
    
    
    
    public function getSchema();
    
    
    
    public function getTable();
    
    
    
    public function getColumns();



//    public function select($where = null);
    public function insert($set);
    
    
    
    public function update($set, $where = null);
    
    
    
    public function delete($where);
    
    
    
    /**
     * Manipulates the given Select based on the $customSqlSelectName and the $request. This can be useful to generate
     * customized queries including joins and additional/calculated columns.
     *
     * @param string                 $customSqlSelectName
     * @param Select                 $select
     * @param ServerRequestInterface $request
     *
     * @return void
     */
    public function customizeSqlSelectFromRequest(
        string $customSqlSelectName,
        Select $select,
        ServerRequestInterface $request
    );
    
    
    
    /**
     * Applies the given filter to a complete Select. This can be used to narrow down a resultset generated by a else
     * complete query.
     *
     * @param array  $filter
     * @param Select $select
     *
     * @return void
     */
    public function applyFilterToSqlSelect(array &$filter, Select $select);
}